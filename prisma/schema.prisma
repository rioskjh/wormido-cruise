generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 관리자 ?�이�?
model Admin {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  email       String   @unique
  name        String
  role        AdminRole @default(ADMIN)
  isActive    Boolean  @default(true) @map("is_active")
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  auditLogs   AuditLog[]

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
}

// ?�원 ?�이�?
model Member {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  email         String         @unique
  phone         String?
  nickname      String
  role          Role           @default(USER)
  level         Int            @default(1)
  point         Int            @default(0)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  auditLogs     AuditLog[]
  comments      Comment[]
  orders        Order[]
  posts         Post[]
  refreshTokens RefreshToken[]
  reservations  Reservation[]

  @@map("members")
}

// ?�품 카테고리 ?�이�?
model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  products    Product[]

  @@map("product_categories")
}

// ?�품 ?�이�?
model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  categoryId    Int?     @map("category_id")
  category      ProductCategory? @relation(fields: [categoryId], references: [id])
  basePrice     Int      @default(0) @map("base_price")
  adultPrice    Int      @default(0) @map("adult_price")
  childPrice    Int      @default(0) @map("child_price")
  infantPrice   Int      @default(0) @map("infant_price")
  maxCapacity   Int      @default(50) @map("max_capacity")
  currentBookings Int    @default(0) @map("current_bookings")
  isActive      Boolean  @default(true) @map("is_active")
  useOptions    Boolean  @default(false) @map("use_options")
  startDate     DateTime? @map("start_date")
  endDate       DateTime? @map("end_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  personTypePrices PersonTypePrice[]
  orders        Order[]
  orderItems    OrderItem[]
  productOptions ProductOption[]
  productSchedules ProductSchedule[]
  reservations  Reservation[]
  images        ProductImage[]

  @@map("products")
}

// ?�원 ?�?�별 가�??�이�?
model PersonTypePrice {
  id        Int        @id @default(autoincrement())
  productId Int        @map("product_id")
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  personType PersonType @map("person_type")
  price     Int
  createdAt DateTime   @default(now()) @map("created_at")

  @@unique([productId, personType])
  @@map("person_type_prices")
}

// ?�품 ?�션 ?�이�?
model ProductOption {
  id        Int      @id @default(autoincrement())
  productId Int        @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  sortOrder Int      @default(0) @map("sort_order")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  values    ProductOptionValue[]

  @@map("product_options")
}

// ?�품 ?�션 �??�이�?
model ProductOptionValue {
  id        Int           @id @default(autoincrement())
  optionId  Int           @map("option_id")
  option    ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  value     String
  price     Int           @default(0)
  sortOrder Int           @default(0) @map("sort_order")
  isActive  Boolean       @default(true) @map("is_active")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  option1Schedules ProductSchedule[] @relation("Option1Schedules")
  option2Schedules ProductSchedule[] @relation("Option2Schedules")
  option3Schedules ProductSchedule[] @relation("Option3Schedules")

  @@map("product_option_values")
}

// ?�품 ?��?�??�이�?
model ProductSchedule {
  id              Int      @id @default(autoincrement())
  productId       Int
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  option1ValueId  Int?
  option1Value    ProductOptionValue? @relation("Option1Schedules", fields: [option1ValueId], references: [id])
  option2ValueId  Int?
  option2Value    ProductOptionValue? @relation("Option2Schedules", fields: [option2ValueId], references: [id])
  option3ValueId  Int?
  option3Value    ProductOptionValue? @relation("Option3Schedules", fields: [option3ValueId], references: [id])
  maxCapacity     Int      @default(0)
  currentBookings Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reservations    Reservation[]

  @@unique([productId, option1ValueId, option2ValueId, option3ValueId])
  @@map("product_schedules")
}

// ?�약 ?�이�?
model Reservation {
  id            Int      @id @default(autoincrement())
  orderNumber   String   @unique @map("order_number")
  memberId      Int?     @map("member_id")
  productId     Int      @map("product_id")
  scheduleId    Int?     @map("schedule_id")
  customerName  String   @map("customer_name")
  customerPhone String   @map("customer_phone")
  customerEmail String   @map("customer_email")
  reservationDate DateTime @map("reservation_date")
  reservationTime String @map("reservation_time")
  adults        Int      @default(0)
  children      Int      @default(0)
  infants       Int      @default(0)
  totalAmount   Int      @default(0) @map("total_amount")
  status        String   @default("PENDING")
  paymentMethod String?  @map("payment_method")
  paymentStatus String   @default("PENDING") @map("payment_status")
  paymentDate   DateTime? @map("payment_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  member        Member?  @relation(fields: [memberId], references: [id], onDelete: SetNull)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  schedule      ProductSchedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)

  @@map("reservations")
}

// 주문 ?�이�?
model Order {
  id            Int         @id @default(autoincrement())
  memberId      Int         @map("member_id")
  productId     Int         @map("product_id")
  totalAmount   Int         @map("total_amount")
  status        OrderStatus @default(PENDING)
  paymentMethod String?     @map("payment_method")
  paymentId     String?     @map("payment_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  member        Member      @relation(fields: [memberId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  items         OrderItem[]

  @@map("orders")
}

// 주문 ?�이???�이�?
model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int     @map("order_id")
  productId   Int     @map("product_id")
  adultCount  Int     @default(0) @map("adult_count")
  childCount  Int     @default(0) @map("child_count")
  infantCount Int     @default(0) @map("infant_count")
  subtotal    Int
  createdAt   DateTime @default(now()) @map("created_at")
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// 게시???�이�?
model Board {
  id          Int    @id @default(autoincrement())
  boardId     String @unique
  title       String
  description String?
  skin        String @default("default")
  useComment  Boolean @default(true)
  useUpload   Boolean @default(false)
  createdAt   DateTime @default(now())
  posts       Post[]

  @@map("boards")
}

// 게시글 ?�이�?
model Post {
  id        Int      @id @default(autoincrement())
  boardId   String
  memberId  Int
  title     String
  content   String
  viewCount Int      @default(0)
  isNotice  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [boardId], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  comments  Comment[]
  attachments Attachment[]

  @@map("posts")
}

// ?��? ?�이�?
model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  memberId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// 첨�??�일 ?�이�?
model Attachment {
  id       Int    @id @default(autoincrement())
  postId   Int
  fileName String
  filePath String
  fileSize Int
  createdAt DateTime @default(now())
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// 감사 로그 ?�이�?
model AuditLog {
  id         Int      @id @default(autoincrement())
  memberId   Int?
  adminId    Int?
  action     String
  resource   String
  resourceId Int?
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  member     Member?  @relation(fields: [memberId], references: [id])
  admin      Admin?   @relation(fields: [adminId], references: [id])

  @@map("audit_logs")
}

// 리프?�시 ?�큰 ?�이�?
model RefreshToken {
  id        Int      @id @default(autoincrement())
  memberId  Int      @map("member_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ?�셜 계정 ?�이�?
model Account {
  id                Int     @id @default(autoincrement())
  memberId          Int     @map("member_id")
  provider          String
  providerAccountId String  @map("provider_account_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  member            Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// ?�거?�들
enum Role {
  USER
  EDITOR
  ADMIN

  @@map("role_type")
}

enum PersonType {
  ADULT
  CHILD
  INFANT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// 상품 이미지 모델
model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  fileName  String   @map("file_name")
  filePath  String   @map("file_path")
  fileSize  Int      @map("file_size")
  sortOrder Int      @default(0) @map("sort_order")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product_images")
}

// 사이트 설정 모델
model SiteSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("site_settings")
}