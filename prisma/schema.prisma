generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 게시판 타입
enum BoardType {
  NOTICE    // 공지사항
  EVENT     // 이벤트
  REVIEW    // 리뷰
  FAQ       // 자주 묻는 질문
  QNA       // 묻고답하기
}

// 관리자 ?이?
model Admin {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  email       String   @unique
  name        String
  role        AdminRole @default(ADMIN)
  isActive    Boolean  @default(true) @map("is_active")
  lastLoginAt DateTime? @map("last_login_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  auditLogs   AuditLog[]

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
}

// ?원 ?이?
model Member {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  email         String         @unique
  phone         String?
  nickname      String
  role          Role           @default(USER)
  level         Int            @default(1)
  point         Int            @default(0)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  accounts      Account[]
  auditLogs     AuditLog[]
  comments      Comment[]
  orders        Order[]
  posts         Post[]
  reservations  Reservation[]
  refreshTokens RefreshToken[]

  @@map("members")
}

enum Role {
  USER
  EDITOR
  ADMIN
}

// 계좌 ?이?
model Account {
  id        Int      @id @default(autoincrement())
  memberId  Int      @map("member_id")
  bankName  String   @map("bank_name")
  accountNumber String @map("account_number")
  accountHolder String @map("account_holder")
  isDefault Boolean  @default(false) @map("is_default")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

// ?사 ?이?
model AuditLog {
  id        Int      @id @default(autoincrement())
  adminId   Int?     @map("admin_id")
  memberId  Int?     @map("member_id")
  action    String
  tableName String   @map("table_name")
  recordId  Int      @map("record_id")
  oldValues Json?
  newValues Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  admin     Admin?   @relation(fields: [adminId], references: [id], onDelete: SetNull)
  member    Member?  @relation(fields: [memberId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// 첨부파일 ?이?
model Attachment {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  fileName  String   @map("file_name")
  filePath  String   @map("file_path")
  fileSize  Int      @map("file_size")
  mimeType  String   @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// 게시판 ?이?
model Board {
  id          Int       @id @default(autoincrement())
  boardId     String    @unique
  title       String
  description String?
  type        BoardType @default(NOTICE)
  skin        String    @default("default")
  useComment  Boolean   @default(true)
  useUpload   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  posts       Post[]

  @@map("boards")
}

// 게시글 ?이?
model Post {
  id              Int       @id @default(autoincrement())
  type            BoardType // 게시판 타입
  boardId         String?   // 기존 호환성을 위해 nullable로 유지
  authorId        Int?      @map("author_id") // 작성자 ID (nullable for non-member posts)
  title           String
  content         String?   // 기존 호환성을 위해 nullable로 유지
  contentHtml     String?   @map("content_html")  // CKEditor HTML
  contentText     String?   @map("content_text")  // 검색용 텍스트
  views           Int       @default(0) @map("views") // viewCount -> views로 변경
  isNotice        Boolean   @default(false) @map("is_notice")
  isSecret        Boolean   @default(false) @map("is_secret")       // QnA 비밀글
  authorName      String?   @map("author_name")   // 비회원 작성자명
  qnaPasswordHash String?   @map("qna_password_hash") // 비회원 QnA 비밀번호
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  author          Member?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  board           Board?    @relation(fields: [boardId], references: [boardId], onDelete: Cascade)
  files           PostFile[] @relation("PostFiles")
  comments        Comment[]
  attachments     Attachment[]

  @@map("posts")
}

// 게시글 첨부파일
model PostFile {
  id           Int      @id @default(autoincrement())
  postId       Int      @map("post_id")
  storagePath  String   @map("storage_path") // 파일 저장 경로
  filename     String   // 원본 파일명
  size         Int      // 파일 크기 (bytes)
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  post         Post     @relation("PostFiles", fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_files")
}

// ?이?
model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  memberId  Int      @map("member_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// 상품 카테고리
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  sortOrder   Int      @default(0) @map("sort_order")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  products    Product[]

  @@map("product_categories")
}

// 주문 ?이?
model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique @map("order_number")
  memberId    Int         @map("member_id")
  status      OrderStatus @default(PENDING)
  totalAmount Int         @map("total_amount")
  paymentMethod String?   @map("payment_method")
  paymentDate DateTime?   @map("payment_date")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  member      Member      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

// 주문 ?이?
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  quantity  Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// 인원 타입별 가격
model PersonTypePrice {
  id        Int    @id @default(autoincrement())
  productId Int    @map("product_id")
  type      String // "adult", "child", "infant"
  price     Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("person_type_prices")
}

// 팝업 ?이?
model Popup {
  id                Int      @id @default(autoincrement())
  title             String
  content           String
  contentHtml       String?  @map("content_html")
  imageUrl          String?  @map("image_url")
  linkUrl           String?  @map("link_url")
  isActive          Boolean  @default(true) @map("is_active")
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  width             Int?     @map("width")
  height            Int?     @map("height")
  backgroundColor   String?  @map("background_color")
  textColor         String?  @map("text_color")
  borderColor       String?  @map("border_color")
  borderRadius      Int?     @map("border_radius")
  zIndex            Int      @default(1000) @map("z_index")
  showDontShowToday Boolean  @default(false) @map("show_dont_show_today")
  cookieExpireHours Int      @default(24) @map("cookie_expire_hours")
  sortOrder         Int      @default(0) @map("sort_order")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("popups")
}

// 상품 ?이?
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  detailHtml  String?  @map("detail_html")
  categoryId  Int      @map("category_id")
  basePrice   Int      @map("base_price")
  adultPrice  Int      @map("adult_price")
  childPrice  Int      @map("child_price")
  infantPrice Int      @map("infant_price")
  maxCapacity Int      @map("max_capacity")
  currentBookings Int  @default(0) @map("current_bookings")
  isActive    Boolean  @default(true) @map("is_active")
  useOptions  Boolean  @default(false) @map("use_options")
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  category    Category @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  options     ProductOption[]
  schedules   ProductSchedule[]
  orderItems  OrderItem[]
  personTypePrices PersonTypePrice[]
  reservations Reservation[]

  @@map("products")
}

// 상품 이미지
model ProductImage {
  id        Int    @id @default(autoincrement())
  productId Int    @map("product_id")
  fileName  String @map("file_name")
  filePath  String @map("file_path")
  fileSize  Int    @map("file_size")
  sortOrder Int    @default(0) @map("sort_order")
  isActive  Boolean @default(true) @map("is_active")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// 상품 옵션 값
model ProductOptionValue {
  id        Int    @id @default(autoincrement())
  optionId  Int    @map("option_id")
  value     String
  price     Int
  sortOrder Int    @default(0) @map("sort_order")
  isActive  Boolean @default(true) @map("is_active")
  option    ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("product_option_values")
}

// 상품 옵션
model ProductOption {
  id        Int    @id @default(autoincrement())
  productId Int    @map("product_id")
  name      String
  sortOrder Int    @default(0) @map("sort_order")
  isActive  Boolean @default(true) @map("is_active")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]

  @@map("product_options")
}

// 상품 스케줄
model ProductSchedule {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  date      DateTime
  time      String
  isActive  Boolean  @default(true) @map("is_active")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_schedules")
}

// 리프레시 토큰
model RefreshToken {
  id        Int      @id @default(autoincrement())
  memberId  Int      @map("member_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// 예약 ?이?
model Reservation {
  id            Int              @id @default(autoincrement())
  orderNumber   String           @unique @map("order_number")
  memberId      Int              @map("member_id")
  productId     Int              @map("product_id")
  customerName  String           @map("customer_name")
  customerPhone String           @map("customer_phone")
  customerEmail String           @map("customer_email")
  adults        Int
  children      Int
  infants       Int
  totalAmount   Int              @map("total_amount")
  status        ReservationStatus @default(PENDING)
  paymentStatus PaymentStatus    @default(PENDING) @map("payment_status")
  paymentMethod String?          @map("payment_method")
  paymentDate   DateTime?        @map("payment_date")
  reservationDate DateTime?      @map("reservation_date")
  reservationTime String?        @map("reservation_time")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  member        Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)
  product       Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// 사이트 설정
model SiteSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  category  String   @default("general")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("site_settings")
}

// 일반 컨텐츠 페이지
model Content {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique // URL 슬러그
  content     String   // 에디터 내용 (HTML)
  contentText String?  @map("content_text") // 검색용 텍스트
  description String?  // 메타 설명
  keywords    String?  // 메타 키워드
  isActive    Boolean  @default(true) @map("is_active")
  isPublished Boolean  @default(false) @map("is_published")
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("contents")
}

// 네비게이션 메뉴
model Navigation {
  id          Int      @id @default(autoincrement())
  title       String   // 메뉴 제목
  url         String?  // 링크 URL (null이면 하위 메뉴가 있는 경우)
  type        NavigationType @default(CUSTOM) // 메뉴 타입
  targetId    Int?     @map("target_id") // 연결된 대상 ID (상품, 게시판, 컨텐츠 등)
  parentId    Int?     @map("parent_id") // 부모 메뉴 ID (null이면 최상위)
  sortOrder   Int      @default(0) @map("sort_order") // 정렬 순서
  isActive    Boolean  @default(true) @map("is_active") // 활성화 여부
  isNewWindow Boolean  @default(false) @map("is_new_window") // 새 창에서 열기
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // 관계
  parent      Navigation? @relation("NavigationHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Navigation[] @relation("NavigationHierarchy")

  @@map("navigations")
}

enum NavigationType {
  CUSTOM      // 사용자 정의 링크
  PRODUCTS    // 상품 목록
  BOARD       // 게시판
  CONTENT     // 컨텐츠 페이지
  EXTERNAL    // 외부 링크
}