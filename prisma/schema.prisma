generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int        @id @default(autoincrement())
  username    String     @unique @db.VarChar(255)
  password    String     @db.VarChar(255)
  email       String     @unique @db.VarChar(255)
  name        String     @db.VarChar(255)
  role        AdminRole?
  isActive    Boolean?   @default(true) @map("is_active")
  lastLoginAt DateTime?  @map("last_login_at") @db.Timestamp(6)
  createdAt   DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  auditLogs   AuditLog[]

  @@map("admins")
}

model Member {
  id                  Int                  @id @default(autoincrement())
  username            String               @unique @db.VarChar(255)
  password            String               @db.VarChar(255)
  email               String               @unique @db.VarChar(255)
  phone               String?              @db.VarChar(20)
  nickname            String               @db.VarChar(255)
  role                Role?
  level               Int?                 @default(1)
  point               Int?                 @default(0)
  createdAt           DateTime?            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  name                String?              @db.VarChar(255)
  accounts            Account[]
  auditLogs           AuditLog[]
  comments            Comment[]
  orders              Order[]
  passwordResetTokens PasswordResetToken[]
  posts               Post[]
  refreshTokens       RefreshToken[]
  reservations        Reservation[]

  @@index([email], map: "idx_members_email")
  @@index([username], map: "idx_members_username")
  @@map("members")
}

model Account {
  id                  Int       @id @default(autoincrement())
  memberId            Int       @map("member_id")
  provider            String    @db.VarChar(255)
  provider_account_id String    @db.VarChar(255)
  access_token        String?
  refresh_token       String?
  expires_at          Int?
  token_type          String?   @db.VarChar(50)
  scope               String?   @db.VarChar(255)
  id_token            String?
  session_state       String?   @db.VarChar(255)
  createdAt           DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  member              Member    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  memberId    Int?      @map("member_id")
  adminId     Int?      @map("admin_id")
  action      String    @db.VarChar(255)
  resource    String    @db.VarChar(255)
  resource_id Int?
  details     String?
  ipAddress   String?   @map("ip_address") @db.VarChar(45)
  userAgent   String?   @map("user_agent")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  admin       Admin?    @relation(fields: [adminId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  member      Member?   @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([adminId], map: "idx_audit_logs_admin_id")
  @@index([createdAt], map: "idx_audit_logs_created_at")
  @@index([memberId], map: "idx_audit_logs_member_id")
  @@map("audit_logs")
}

model Attachment {
  id        Int       @id @default(autoincrement())
  postId    Int       @map("post_id")
  fileName  String    @map("file_name") @db.VarChar(255)
  filePath  String    @map("file_path") @db.VarChar(500)
  fileSize  Int       @map("file_size")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("attachments")
}

model Board {
  id               Int                @id @default(autoincrement())
  boardId          String             @unique @map("board_id") @db.VarChar(255)
  title            String             @db.VarChar(255)
  description      String?
  skin             String?            @default("default") @db.VarChar(50)
  useComment       Boolean?           @default(true) @map("use_comment")
  useUpload        Boolean?           @default(false) @map("use_upload")
  createdAt        DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  type             BoardType?         @default(NOTICE)
  isAdminOnly      Boolean?           @default(false) @map("is_admin_only")
  updated_at       DateTime?          @default(now()) @db.Timestamp(6)
  board_categories board_categories[]
  posts            Post[]

  @@map("boards")
}

model Post {
  id              Int          @id @default(autoincrement())
  boardId         String?      @map("board_id") @db.VarChar(255)
  member_id       Int?
  title           String       @db.VarChar(255)
  content         String?
  view_count      Int?         @default(0)
  isNotice        Boolean?     @default(false) @map("is_notice")
  createdAt       DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  contentHtml     String?      @map("content_html")
  contentText     String?      @map("content_text")
  isSecret        Boolean?     @default(false) @map("is_secret")
  authorName      String?      @map("author_name")
  qnaPasswordHash String?      @map("qna_password_hash")
  type            BoardType    @default(NOTICE)
  authorId        Int?         @map("author_id")
  views           Int?         @default(0) @map("views")
  attachments     Attachment[]
  comments        Comment[]
  files           PostFile[]   @relation("PostFiles")
  boards          Board?       @relation(fields: [boardId], references: [boardId], onDelete: Cascade, onUpdate: NoAction, map: "posts_board_id_fkey")
  members         Member?      @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([boardId], map: "idx_posts_board_id")
  @@index([createdAt], map: "idx_posts_created_at")
  @@index([isNotice(sort: Desc)], map: "idx_posts_is_notice")
  @@index([member_id], map: "idx_posts_member_id")
  @@map("posts")
}

model PostFile {
  id          Int       @id @default(autoincrement())
  postId      Int       @map("post_id")
  storagePath String    @map("storage_path")
  filename    String
  size        Int?
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  post        Post      @relation("PostFiles", fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post_files_post_id")

  @@index([postId], map: "idx_post_files_post_id")
  @@map("post_files")
}

model Comment {
  id         Int       @id @default(autoincrement())
  postId     Int       @map("post_id")
  memberId   Int       @map("member_id")
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  member     Member    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([memberId], map: "idx_comments_member_id")
  @@index([postId], map: "idx_comments_post_id")
  @@map("comments")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  isActive    Boolean?  @default(true) @map("is_active")
  sortOrder   Int?      @default(0) @map("sort_order")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  products    Product[]

  @@map("product_categories")
}

model Order {
  id            Int         @id @default(autoincrement())
  memberId      Int         @map("member_id")
  product_id    Int
  totalAmount   Int         @map("total_amount")
  paymentMethod String?     @map("payment_method") @db.VarChar(50)
  payment_id    String?     @db.VarChar(255)
  createdAt     DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  items         OrderItem[]
  member        Member      @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products      Product     @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("orders")
}

model OrderItem {
  id           Int       @id @default(autoincrement())
  orderId      Int       @map("order_id")
  productId    Int       @map("product_id")
  adult_count  Int?      @default(0)
  child_count  Int?      @default(0)
  infant_count Int?      @default(0)
  subtotal     Int
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  order        Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product      Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("order_items")
}

model PersonTypePrice {
  id         Int       @id @default(autoincrement())
  productId  Int       @map("product_id")
  price      Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  type       String?   @db.VarChar(50)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("person_type_prices")
}

model Popup {
  id                Int       @id @default(autoincrement())
  title             String
  content           String
  isActive          Boolean   @default(true) @map("is_active")
  startDate         DateTime? @map("start_date")
  endDate           DateTime? @map("end_date")
  show_count        Int       @default(0)
  max_show          Int?
  target_pages      String?
  exclude_pages     String?
  width             Int?      @map("width")
  height            Int?      @map("height")
  backgroundColor   String?   @map("background_color")
  textColor         String?   @map("text_color")
  borderColor       String?   @map("border_color")
  borderRadius      Int?      @default(8) @map("border_radius")
  zIndex            Int       @default(1000) @map("z_index")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")
  contentHtml       String?   @map("content_html")
  images            String?
  showDontShowToday Boolean?  @default(false) @map("show_dont_show_today")
  cookieExpireHours Int?      @default(24) @map("cookie_expire_hours")
  imageUrl          String?   @map("image_url")
  linkUrl           String?   @map("link_url")
  sortOrder         Int?      @default(0) @map("sort_order")

  @@index([isActive, startDate, endDate], map: "idx_popups_active_dates")
  @@map("popups")
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  description      String?
  categoryId       Int?              @map("category_id")
  basePrice        Int?              @default(0) @map("base_price")
  adultPrice       Int?              @default(0) @map("adult_price")
  childPrice       Int?              @default(0) @map("child_price")
  infantPrice      Int?              @default(0) @map("infant_price")
  maxCapacity      Int?              @default(50) @map("max_capacity")
  currentBookings  Int?              @default(0) @map("current_bookings")
  isActive         Boolean?          @default(true) @map("is_active")
  useOptions       Boolean?          @default(false) @map("use_options")
  startDate        DateTime?         @map("start_date") @db.Timestamp(6)
  endDate          DateTime?         @map("end_date") @db.Timestamp(6)
  createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  detailHtml       String?           @map("detail_html")
  orderItems       OrderItem[]
  orders           Order[]
  personTypePrices PersonTypePrice[]
  images           ProductImage[]
  options          ProductOption[]
  schedules        ProductSchedule[]
  category         Category?         @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reservations     Reservation[]

  @@index([categoryId], map: "idx_products_category_id")
  @@index([isActive], map: "idx_products_is_active")
  @@map("products")
}

model ProductImage {
  id         Int       @id @default(autoincrement())
  productId  Int       @map("product_id")
  fileName   String    @map("file_name") @db.VarChar(255)
  filePath   String    @map("file_path") @db.VarChar(500)
  fileSize   Int       @map("file_size")
  sortOrder  Int?      @default(0) @map("sort_order")
  isActive   Boolean?  @default(true) @map("is_active")
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_images_product_id")

  @@index([isActive], map: "idx_product_images_is_active")
  @@index([productId], map: "idx_product_images_product_id")
  @@index([sortOrder], map: "idx_product_images_sort_order")
  @@map("product_images")
}

model ProductOptionValue {
  id                                                                          Int               @id @default(autoincrement())
  optionId                                                                    Int               @map("option_id")
  value                                                                       String            @db.VarChar(255)
  price                                                                       Int?              @default(0)
  sortOrder                                                                   Int?              @default(0) @map("sort_order")
  isActive                                                                    Boolean?          @default(true) @map("is_active")
  created_at                                                                  DateTime?         @default(now()) @db.Timestamp(6)
  updated_at                                                                  DateTime?         @default(now()) @db.Timestamp(6)
  option                                                                      ProductOption     @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_schedules_product_schedules_option1_value_idToproduct_option_values ProductSchedule[] @relation("product_schedules_option1_value_idToproduct_option_values")
  product_schedules_product_schedules_option2_value_idToproduct_option_values ProductSchedule[] @relation("product_schedules_option2_value_idToproduct_option_values")
  product_schedules_product_schedules_option3_value_idToproduct_option_values ProductSchedule[] @relation("product_schedules_option3_value_idToproduct_option_values")

  @@map("product_option_values")
}

model ProductOption {
  id         Int                  @id @default(autoincrement())
  productId  Int                  @map("product_id")
  name       String               @db.VarChar(255)
  sortOrder  Int?                 @default(0) @map("sort_order")
  isActive   Boolean?             @default(true) @map("is_active")
  created_at DateTime?            @default(now()) @db.Timestamp(6)
  updated_at DateTime?            @default(now()) @db.Timestamp(6)
  values     ProductOptionValue[]
  product    Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_options")
}

model ProductSchedule {
  id                                                                              Int                 @id @default(autoincrement())
  productId                                                                       Int                 @map("product_id")
  option1_value_id                                                                Int?
  option2_value_id                                                                Int?
  option3_value_id                                                                Int?
  max_capacity                                                                    Int?                @default(0)
  current_bookings                                                                Int?                @default(0)
  isActive                                                                        Boolean?            @default(true) @map("is_active")
  created_at                                                                      DateTime?           @default(now()) @db.Timestamp(6)
  updated_at                                                                      DateTime?           @default(now()) @db.Timestamp(6)
  product_option_values_product_schedules_option1_value_idToproduct_option_values ProductOptionValue? @relation("product_schedules_option1_value_idToproduct_option_values", fields: [option1_value_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_option_values_product_schedules_option2_value_idToproduct_option_values ProductOptionValue? @relation("product_schedules_option2_value_idToproduct_option_values", fields: [option2_value_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_option_values_product_schedules_option3_value_idToproduct_option_values ProductOptionValue? @relation("product_schedules_option3_value_idToproduct_option_values", fields: [option3_value_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product                                                                         Product             @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reservations                                                                    Reservation[]

  @@unique([productId, option1_value_id, option2_value_id, option3_value_id])
  @@map("product_schedules")
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  memberId  Int       @map("member_id")
  token     String    @unique @db.VarChar(500)
  expiresAt DateTime  @map("expires_at") @db.Timestamp(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([memberId], map: "idx_refresh_tokens_member_id")
  @@index([token], map: "idx_refresh_tokens_token")
  @@map("refresh_tokens")
}

model Reservation {
  id                  Int                @id @default(autoincrement())
  orderNumber         String             @unique @map("order_number") @db.VarChar(255)
  memberId            Int?               @map("member_id")
  productId           Int                @map("product_id")
  schedule_id         Int?
  customerName        String             @map("customer_name") @db.VarChar(255)
  customerPhone       String             @map("customer_phone") @db.VarChar(20)
  customerEmail       String             @map("customer_email") @db.VarChar(255)
  reservationDate     DateTime           @map("reservation_date") @db.Timestamp(6)
  reservationTime     String             @map("reservation_time") @db.VarChar(10)
  adults              Int?               @default(0)
  children            Int?               @default(0)
  infants             Int?               @default(0)
  totalAmount         Int?               @default(0) @map("total_amount")
  paymentMethod       String?            @map("payment_method") @db.VarChar(50)
  paymentDate         DateTime?          @map("payment_date") @db.Timestamp(6)
  createdAt           DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  status              ReservationStatus? @default(PENDING)
  paymentStatus       PaymentStatus?     @default(PENDING) @map("payment_status")
  representativeName  String             @default("") @map("representative_name")
  representativePhone String             @default("") @map("representative_phone")
  representativeEmail String             @default("") @map("representative_email")
  member              Member?            @relation(fields: [memberId], references: [id], onUpdate: NoAction)
  product             Product            @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_schedules   ProductSchedule?   @relation(fields: [schedule_id], references: [id], onUpdate: NoAction)

  @@index([createdAt], map: "idx_reservations_created_at")
  @@index([customerEmail], map: "idx_reservations_customer_email")
  @@index([memberId], map: "idx_reservations_member_id")
  @@index([orderNumber], map: "idx_reservations_order_number")
  @@index([paymentStatus], map: "idx_reservations_payment_status")
  @@index([productId], map: "idx_reservations_product_id")
  @@index([reservationDate], map: "idx_reservations_reservation_date")
  @@index([status], map: "idx_reservations_status")
  @@map("reservations")
}

model SiteSettings {
  id          Int       @id @default(autoincrement())
  key         String    @unique @db.VarChar(255)
  value       String
  description String?
  category    String?   @default("general") @db.VarChar(100)
  isActive    Boolean?  @default(true) @map("is_active")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("site_settings")
}

model Content {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  contentText String?   @map("content_text")
  description String?
  keywords    String?
  isActive    Boolean?  @default(true) @map("is_active")
  isPublished Boolean?  @default(false) @map("is_published")
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at")

  @@map("contents")
}

model Navigation {
  id          Int            @id @default(autoincrement())
  title       String
  url         String?
  type        NavigationType @default(CUSTOM)
  targetId    Int?           @map("target_id")
  parentId    Int?           @map("parent_id")
  sortOrder   Int            @default(0) @map("sort_order")
  isActive    Boolean        @default(true) @map("is_active")
  isNewWindow Boolean        @default(false) @map("is_new_window")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @default(now()) @updatedAt @map("updated_at")
  parent      Navigation?    @relation("NavigationHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Navigation[]   @relation("NavigationHierarchy")

  @@index([isActive])
  @@index([parentId])
  @@index([sortOrder])
  @@map("navigations")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique @db.VarChar(255)
  memberId  Int       @map("member_id")
  expiresAt DateTime  @map("expires_at") @db.Timestamp(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  member    Member    @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt], map: "idx_password_reset_tokens_expires_at")
  @@index([memberId], map: "idx_password_reset_tokens_member_id")
  @@index([token], map: "idx_password_reset_tokens_token")
  @@map("password_reset_tokens")
}

model board_categories {
  id         Int       @id @default(autoincrement())
  board_id   Int
  name       String    @db.VarChar(255)
  sort_order Int?      @default(0)
  is_active  Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  boards     Board     @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum BoardType {
  GENERAL
  GALLERY
  FAQ
  NOTICE
  QNA
  EVENT
  REVIEW
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
}

enum Role {
  USER
  EDITOR
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NavigationType {
  CUSTOM
  PRODUCTS
  BOARD
  CONTENT
  EXTERNAL
  SCHEDULE
}
